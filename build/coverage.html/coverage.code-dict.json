{"/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/test.js":"/* istanbul instrument in package npmtest_ember_cli_bootstrap_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/lib.npmtest_ember_cli_bootstrap_datepicker.js":"/* istanbul instrument in package npmtest_ember_cli_bootstrap_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_bootstrap_datepicker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_bootstrap_datepicker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-bootstrap-datepicker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_bootstrap_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_bootstrap_datepicker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_bootstrap_datepicker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_bootstrap_datepicker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_bootstrap_datepicker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_bootstrap_datepicker.__dirname + '/lib.npmtest_ember_cli_bootstrap_datepicker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-bootstrap-datepicker',\n\n  included: function(app) {\n    this._super.included(app);\n\n    if (process.env.EMBER_CLI_FASTBOOT !== 'true') {\n      app.import(app.bowerDirectory + '/bootstrap-datepicker/dist/js/bootstrap-datepicker.js');\n      app.import(app.bowerDirectory + '/bootstrap-datepicker/dist/css/bootstrap-datepicker.css');\n    }\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/config/ember-try.js":"/*jshint node:true*/\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/addon/components/bootstrap-datepicker-inline.js":"import Ember from 'ember';\nimport DatepickerSupport from 'ember-cli-bootstrap-datepicker/components/datepicker-support';\n\nexport default Ember.Component.extend(DatepickerSupport, {\n  tagName: 'div'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/addon/components/bootstrap-datepicker.js":"import Ember from 'ember';\nimport DatepickerSupport from 'ember-cli-bootstrap-datepicker/components/datepicker-support';\n\nexport default Ember.Component.extend(DatepickerSupport, {\n  instrumentDisplay: '{{input type=\"text\"}}',\n\n  classNames: ['ember-text-field'],\n\n  tagName: 'input',\n\n  attributeBindings: [\n    'accesskey',\n    'autocomplete',\n    'autofocus',\n    'contenteditable',\n    'contextmenu',\n    'dir',\n    'disabled',\n    'draggable',\n    'dropzone',\n    'form',\n    'hidden',\n    'id',\n    'lang',\n    'list',\n    'max',\n    'min',\n    'name',\n    'placeholder',\n    'readonly',\n    'required',\n    'spellcheck',\n    'step',\n    'tabindex',\n    'title',\n    'translate',\n    'type'\n  ],\n\n  type: 'text'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/addon/components/datepicker-support.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  mustUpdateInput: true,\n  value: null,\n  // add the observed properties\n  minViewMode: undefined,\n  format: undefined,\n  language: undefined,\n  startDate: undefined,\n  endDate: undefined,\n  customParser: function(value) {\n    return value;\n  },\n\n  setupBootstrapDatepicker: Ember.on('didInsertElement', function() {\n\n    this.$().\n      datepicker({\n        autoclose: this.get('autoclose'),\n        calendarWeeks: this.get('calendarWeeks'),\n        clearBtn: this.get('clearBtn'),\n        container: this.get('widgetContainer'),\n        daysOfWeekDisabled: this.get('daysOfWeekDisabled'),\n        defaultViewDate: this.get('defaultViewDate'),\n        disableTouchKeyboard: this.get('disableTouchKeyboard'),\n        enableOnReadonly: this.get('enableOnReadonly'),\n        endDate: this.get('endDate'),\n        forceParse: this.get('forceParse'),\n        format: this._toString(this.get('format')),\n        immediateUpdates: this.get('immediateUpdates'),\n        keyboardNavigation: this.get('keyboardNavigation'),\n        language: this.get('language') || undefined,\n        maxViewMode: this.get('maxViewMode'),\n        minViewMode: this.get('minViewMode'),\n        multidate: this.get('multidate'),\n        multidateSeparator: this.get('multidateSeparator'),\n        orientation: this.get('orientation'),\n        showOnFocus: this.get('showOnFocus'),\n        startDate: this.get('startDate'),\n        startView: this.get('startView'),\n        todayBtn: this.get('todayBtn'),\n        todayHighlight: this.get('todayHighlight'),\n        toggleActive: this.get('toggleActive'),\n        weekStart: this.get('weekStart'),\n        datesDisabled: this.get('datesDisabled')\n      }).\n      on('changeDate', event => {\n        Ember.run(() => {\n          this._didChangeDate(event);\n        });\n      }).\n      on('changeMonth', event => {\n        this.sendAction('changeMonth', event.date);\n      }).\n      on('focusout', event => {\n        this.sendAction('focus-out', this, event);\n      }).\n      on('focusin', event => {\n        this.sendAction('focus-in', this, event);\n      }).\n      on('clearDate', event => {\n        Ember.run(() => {\n          this._didChangeDate(event);\n        });\n      }).\n      on('show', () => {\n        this.sendAction('show');\n      }).\n      on('hide', () => {\n        this.sendAction('hide');\n      });\n\n    this._updateDatepicker();\n  }),\n\n  teardownBootstrapDatepicker: Ember.on('willDestroyElement', function() {\n    this.$().datepicker('remove');\n  }),\n\n  didChangeValue: Ember.observer('value', function() {\n    this._updateDatepicker();\n  }),\n\n  _didChangeDate: function(event) {\n    var value = null;\n\n    if (event.date) {\n      if (this.get('multidate')) {\n        value = this.$().datepicker('getDates');\n      } else {\n        value = this.$().datepicker('getDate');\n      }\n    }\n\n    this.set('mustUpdateInput', false);\n    this.set('value', value);\n    if (event.type === 'clearDate') {\n      this.sendAction('clearDate');\n    } else {\n      this.sendAction('changeDate', value);\n    }\n  },\n\n  _addObservers: Ember.on('didInsertElement', function() {\n    this.addObserver('language', function() {\n      this.$().datepicker('remove');\n      this.setupBootstrapDatepicker();\n    });\n\n    this.addObserver('startDate', function() {\n      this.$().datepicker('setStartDate', this.get('startDate'));\n      this._updateDatepicker();\n    });\n\n    this.addObserver('endDate', function() {\n      this.$().datepicker('setEndDate', this.get('endDate'));\n      this._updateDatepicker();\n    });\n\n    this.addObserver('datesDisabled', function() {\n      this.$().datepicker('setDatesDisabled', this.get('datesDisabled'));\n      this._updateDatepicker();\n    });\n\n    this.addObserver('minViewMode', function() {\n      this.$().datepicker('minViewMode', this.get('minViewMode'));\n      this.$().data('datepicker')._process_options({minViewMode: this.get('minViewMode')});\n      this._updateDatepicker();\n    });\n\n    this.addObserver('format', function() {\n      let format = this._toString(this.get('format'));\n      this.$().datepicker('format', format);\n      this.$().data('datepicker')._process_options({format: format});\n      this._updateDatepicker();\n    });\n  }),\n\n  _updateDatepicker: function() {\n    var element = this.$(),\n        value = this.get('value'),\n        customParser = this.get('customParser'),\n        dates = [];\n\n    if (!this.get('mustUpdateInput')) {\n      this.set('mustUpdateInput', true);\n      return;\n    }\n\n    value = customParser(value);\n\n    switch (Ember.typeOf(value)) {\n      case 'array':\n        dates = value;\n        break;\n      case 'date':\n        dates = [value];\n        break;\n      default:\n        dates = [null];\n    }\n    dates = dates.map(date => {\n      return (Ember.isNone(date)) ? null : this._getDateCloneWithNoTime(date);\n    });\n\n    element.datepicker\n           .apply(element, Array.prototype.concat.call(['update'], dates));\n  },\n\n  // HACK: Have to reset time to 00:00:00 because of the bug in\n  //       bootstrap-datepicker\n  //       Issue: http://git.io/qH7Hlg\n  _getDateCloneWithNoTime: function(date) {\n    var clone = new Date(date.getTime());\n\n    clone.setHours(0);\n    clone.setMinutes(0);\n    clone.setSeconds(0);\n    clone.setMilliseconds(0);\n\n    return clone;\n  },\n\n  /**\n   * Fix Issue #59\n   * _toString Checks and converts the input object and returns  a String if it is required and feasible\n   * @param  {Object} obj The object to check\n   * @return {Object} The object as a String\n   */\n  _toString: function (obj) {\n    if (typeof obj !== typeof Undefined && obj !== typeof String) {\n      if (typeof obj.toString === typeof Function) {\n        obj = obj.toString();\n      } else {\n        // No toString() method available - There is nothing else that can be done\n        throw new Error(\"At _toString() (datepicker-support.js) - No toString() method available for the passed object.\");\n      }\n    }\n    return obj;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/app/components/bootstrap-datepicker-inline.js":"import Ember from 'ember';\nimport BootstrapDatepickerInlineComponent from 'ember-cli-bootstrap-datepicker/components/bootstrap-datepicker-inline';\n\nexport default BootstrapDatepickerInlineComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-bootstrap-datepicker/node_modules/ember-cli-bootstrap-datepicker/app/components/bootstrap-datepicker.js":"import Ember from 'ember';\nimport BootstrapDatepickerComponent from 'ember-cli-bootstrap-datepicker/components/bootstrap-datepicker';\n\nexport default BootstrapDatepickerComponent;\n"}